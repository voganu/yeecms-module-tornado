<?php

namespace voganu\tornado\frontend\controllers;

use DeepCopy\Exception\PropertyException;
use voganu\tornado\models\Prihod;
use voganu\tornado\models\Rashod;
use voganu\tornado\models\TorPrihod;
use voganu\tornado\models\TorPrihodDateV;
use voganu\tornado\models\TorPrihodDateVSearch;
use voganu\tornado\models\TorPrihodSearch;
use Yii;
use voganu\tornado\models\Postav;
//use luya\news\models\Cat;
use yii\data\ActiveDataProvider;
use yii\helpers\Html;
use yii\helpers\Json;
use yeesoft\controllers\admin\BaseController;

/**
 * News Module Default Controller contains actions to display and render views with predefined data.
 *
 * @author Basil Suter <basil@nadar.io>
 */
class DefaultController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::$app->language = 'ru_RU';
    }

    /**
     * Get Article overview.
     *
     * The index action will return an active data provider object inside the $provider variable:
     *
     * ```php
     * foreach ($provider->models as $item) {
     *     var_dump($item);
     * }
     * ```
     *
     * @return string
     */
    public function actionIndex()
    {
//        $items = [
//            [
//                'label'=>'<i class="fas fa-home"></i> Home',
//                'content'=> ->actionPrihod(),
//                'active'=>true,
//                'linkOptions'=>['data-tab' => 'prihod-tab']
//            ],
//            [
//                'label'=>'<i class="fas fa-user"></i> Update',
//                'content'=>'',
//                'linkOptions'=>['id' => 'prihodupdate-tab', 'data-tab' => 'prihodupdate-tab',
//                    //'data-url'=>\yii\helpers\Url::to(['default/update'])
//                    ]
//            ],
//        ];

        $searchModel = new TorPrihodDateVSearch();
         $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('_prihoddate', [
//            'items' => $items,
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
//        return $this->render('index', [
//            'model' => Prihod::class,
//            'provider' => TorPrihodSearch::se,
//        ]);
    }


    public function actionPrihod()
    {
        $searchModel = new TorPrihodDateVSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        if (Yii::$app->request->isAjax) {
            return Json::encode($this->renderAjax('_prihod', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]));
        }
        else {
            return $this->render('_prihod', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        }
    }

    public function actionUpdate()
    {
        if (Yii::$app->request->isAjax) {
//            return '2';
        $params = Yii::$app->request->queryParams;
        $model = TorPrihodSearch::findOne($params['id']);
        return $this->renderAjax('_prihodupdate', [
            'model' => $model,
         ]);
        }
        return 3;
    }

    /**
     * Get all articles for a given categorie ids string seperated by command.
     *
     * @param string $ids The categorie ids: `1,2,3`
     * @return \yii\web\Response|string
     */
    public function actionCategories($ids)
    {
        $ids = explode(",", Html::encode($ids));
        
        if (!is_array($ids)) {
            return $this->goHome();
        }
        
        $provider = new ActiveDataProvider([
            'query' => Article::find()->where(['in', 'cat_id', $ids])->andWhere(['is_deleted' => false]),
            'sort' => [
                'defaultOrder' => $this->module->articleDefaultOrder,
            ],
            'pagination' => [
                'route' => $this->module->id,
                'params' => ['page' => Yii::$app->request->get('page')],
                'defaultPageSize' => $this->module->articleDefaultPageSize,
            ],
        ]);
        
        return $this->render('categories', [
            'provider' => $provider,
        ]);
    }

    /**
     * Get the category Model for a specific ID.
     *
     * The most common way is to use the active data provider object inside the $provider variable:
     *
     * ```php
     * foreach ($provider->getModels() as $cat) {
     *     var_dump($cat);
     * }
     * ```
     *
     * Inside the Cat Object you can then retrieve its articles:
     *
     * ```php
     * foreach ($model->articles as $item) {
     *
     * }
     * ```
     *
     * or customize the where query:
     *
     * ```php
     * foreach ($model->getArticles()->where(['timestamp', time())->all() as $item) {
     *
     * }
     * ```
     *
     * @param integer $categoryId
     * @return \yii\web\Response|string
     */
    public function actionCategory($categoryId)
    {
        $model = Cat::findOne($categoryId);
        
        if (!$model) {
            return $this->goHome();
        }
        
        $provider = new ActiveDataProvider([
            'query' => $model->getArticles(),
            'sort' => [
                'defaultOrder' => $this->module->categoryArticleDefaultOrder,
            ],
            'pagination' => [
                'route' => $this->module->id,
                'params' => ['page' => Yii::$app->request->get('page')],
                'defaultPageSize' => $this->module->categoryArticleDefaultPageSize,
            ],
        ]);
        
        return $this->render('category', [
            'model' => $model,
            'provider' => $provider,
        ]);
    }
    
    /**
     * Detail Action of an article by Id.
     *
     * @param integer $id
     * @param string $title
     * @return \yii\web\Response|string
     */
//    public function actionDetail($id, $title)
//    {
//        $model = Article::findOne(['id' => $id, 'is_deleted' => false]);
//
//        if (!$model) {
//            return $this->goHome();
//        }
//
//        return $this->render('detail', [
//            'model' => $model,
//        ]);
//    }
    public function actionDetail() {
        if (isset($_POST['expandRowKey'])) {
            $model = Rashod::findOne($_POST['expandRowKey']);
            return $this->renderPartial('_book-details', ['model'=>$model]);
        } else {
            return '<div class="alert alert-danger">No data found</div>';
        }
    }
}
